// BSLLS:LineLength-off
#Использовать sql
#Использовать configor
#Использовать asserts
#Использовать v8runner
#Использовать logos

Перем ОбщиеПараметры; //Глобальное хранилище параметров общих для всех скриптов.
Перем ЧасовойПояс;
Перем Лог;
Процедура СоздатьБэкап(ПутьАрхива, ТипБазы) Экспорт
	
	серверБД = ОбщиеПараметры.Параметр("serverDB"+ТипБазы);
	ПользовательБД = ОбщиеПараметры.Параметр("userDB"+ТипБазы);
	ПарольБД = ОбщиеПараметры.Параметр("passwDB"+ТипБазы);
	ИмяБазы = ОбщиеПараметры.Параметр("sourceDB" + ТипБазы);

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = серверБД;
	Соединение.ИмяПользователя = ПользовательБД;
	Соединение.Пароль = ПарольБД;
	Соединение.ИмяБазы = ИмяБазы;
	Соединение.Открыть();

	Запрос = Новый Запрос;
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Таймаут = 0; 
	Запрос.Текст = "BACKUP DATABASE [" + ИмяБазы +"] TO  DISK = N'" + ПутьАрхива + "' WITH  COPY_ONLY,  RETAINDAYS = 1, NOFORMAT, NOINIT,  
	|NAME = N'"+ИмяБазы + "', SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10";
	
	Запрос.ВыполнитьКоманду();

	Соединение.Закрыть();
КонецПроцедуры

Процедура ВосстановитьБэкап(ПутьАрхива, ТипБазы) Экспорт

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);

	серверБД = ОбщиеПараметры.Параметр("serverDBtest");
	ПользовательБД = ОбщиеПараметры.Параметр("userDBtest");
	ИмяБазы = ОбщиеПараметры.Параметр(ТипБазы + "DBtest");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = серверБД;
	Соединение.ИмяПользователя = ОбщиеПараметры.Параметр("usersaDBtest");
	Соединение.Пароль = ОбщиеПараметры.Параметр("passwsaDBtest");
	Соединение.ИмяБазы = ИмяБазы;
	Соединение.Открыть();

	ИмяНабора = ОбщиеПараметры.Параметр(ТипБазы + "Datafile");
	ПутьДанных = ОбщиеПараметры.Параметр("MSSQLDataPath");
	Запрос = Новый Запрос;
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "USE [master]
	|ALTER DATABASE [" + ИмяБазы +"] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	|RESTORE DATABASE [" + ИмяБазы +"] FROM  DISK = N'" + ПутьАрхива + "' WITH  FILE = 1, 
	|MOVE N'" + ИмяНабора + "' TO N'"+ ПутьДанных + ИмяБазы + ".mdf',  MOVE N'" + ИмяНабора + "_log' TO N'"+ ПутьДанных + ИмяБазы + "_log.ldf',  NOUNLOAD,  REPLACE,  STATS = 5
	|ALTER DATABASE [" + ИмяБазы +"] SET MULTI_USER";
	
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Текст запроса:  " + Запрос.Текст);
	Запрос.Таймаут = 0;	
	Попытка
		Запрос.ВыполнитьКоманду();	
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Явно указываем владельца БД");
	Запрос.Текст = "ALTER AUTHORIZATION ON DATABASE::[" + ИмяБазы +"] TO [" + ПользовательБД +"]"; // BSLLS:UsingHardcodeNetworkAddress-off
	Попытка	
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Меняем режим восстановления");
	Запрос.Текст = "USE [master]
	|ALTER DATABASE [" + ИмяБазы +"]
	|SET RECOVERY SIMPLE";
	Попытка
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Обрезаем файлы базы");	
	Запрос.Текст = "USE [" + ИмяБазы +"]
	|SELECT file_id, name
	|FROM sys.database_files
	|DBCC SHRINKFILE (2, TRUNCATEONLY)";
	Попытка	
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	Соединение.Закрыть();
КонецПроцедуры

Процедура ПрочитатьПараметры()
	
	ОбщиеПараметры  = Новый МенеджерПараметров();
	ОбщиеПараметры.ДобавитьПровайдерПараметров(Новый ПровайдерПараметровJSON());
	ОбщиеПараметры.УстановитьФайлПараметров(ОбъединитьПути(ТекущийСценарий().Каталог, "configs\backup.json"));
	ОбщиеПараметры.Прочитать();

КонецПроцедуры

Процедура ВывестиДанныеПроцесса(Знач Процесс, Знач Приемник)
	Вывод = Процесс.ПотокВывода.Прочитать();
	Ошибки = Процесс.ПотокОшибок.Прочитать();
	Если СтрДлина(Строка(Вывод)) > 0 Тогда
		Приемник.ДобавитьСтроку(Вывод);
	КонецЕсли;
	Если СтрДлина(Строка(Ошибки)) > 0 Тогда
		Приемник.ДобавитьСтроку(Ошибки);
	КонецЕсли;
КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка) Экспорт
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Функция ЗапуститьПроцесс(Знач СтрокаВыполнения)
	Перем ПаузаОжиданияЧтенияБуфера;
	
	ПаузаОжиданияЧтенияБуфера = 20;
	
	Лог.Отладка(СтрокаВыполнения);
	Процесс = СоздатьПроцесс(СтрокаВыполнения, ,Истина);
	Процесс.Запустить();
	
	Текст = Новый ТекстовыйДокумент;
	
	Пока Истина Цикл
		
		ВывестиДанныеПроцесса(Процесс, Текст);
		
		Если Процесс.Завершен Тогда
			Процесс.ОжидатьЗавершения(); // финальный сброс буферов
			ВывестиДанныеПроцесса(Процесс, Текст);
			Прервать;
		КонецЕсли;
		
		Приостановить(ПаузаОжиданияЧтенияБуфера);
		
	КонецЦикла;
	
	Если Процесс.КодВозврата = 0 Тогда
		Возврат Текст.ПолучитьТекст();
	Иначе
		ВызватьИсключение "Сообщение от RAS/RAC 
		|" + Текст.ПолучитьТекст();
	КонецЕсли;	
	
КонецФункции

Функция РазобратьНаКлючИЗначение(Знач СтрокаРазбора, Ключ, Значение)
	
	ПозицияРазделителя = Найти(СтрокаРазбора, ":");
	Если ПозицияРазделителя = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Ключ     = СокрЛП(Лев(СтрокаРазбора, ПозицияРазделителя - 1));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1));
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьАвторизациюНаКластере()
	СтрокаАвторизации = "";
	Пользователь = ОбщиеПараметры.Параметр("appServerAdmin");
	Если Пользователь <> "" Тогда
		СтрокаАвторизации = " --cluster-user=" + Пользователь + " --cluster-pwd=" + ОбщиеПараметры.Параметр("appServerAdminPwd");
	КонецЕсли;

	Возврат СтрокаАвторизации;
КонецФункции

Процедура ОтключитьСеансы(ТипБазы)
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Проверяем наличие сеансов");
	Прил = ОбщиеПараметры.Параметр("appPath");
	ИдентКластера = ОбщиеПараметры.Параметр("clusterGUID");
	ИдентБазы = ОбщиеПараметры.Параметр(ТипБазы + "GUID");
	СтрокаЗапуска = ОбернутьВКавычки(Прил) + " session  --cluster=" + ИдентКластера + " list --infobase=" + ИдентБазы;
	СписокСеансов = СокрЛП(ЗапуститьПроцесс(СтрокаЗапуска));	

	ШаблонСтроки = ОбернутьВКавычки(Прил) + " session --cluster="+ ИдентКластера 
					+ ПолучитьАвторизациюНаКластере() +" terminate --session=";
	ТД = Новый ТекстовыйДокумент;
	
	Сессия = "";
	Попытка
	ТД.УстановитьТекст(СписокСеансов);
	Для Сч = 1 По ТД.КоличествоСтрок() Цикл
		Текст = ТД.ПолучитьСтроку(Сч);
		Если ПустаяСтрока(Текст) Тогда 
			Продолжить; 
		КонецЕсли;
		СтрокаРазбораИмя      = "";
		СтрокаРазбораЗначение = "";
		РазобратьНаКлючИЗначение(Текст,СтрокаРазбораИмя, СтрокаРазбораЗначение);
		Если СтрокаРазбораИмя = "session" Тогда
			Сессия = СтрокаРазбораЗначение;
		КонецЕсли;
		Если СтрокаРазбораИмя = "user-name" Тогда
			Если СтрокаРазбораЗначение <> "Робот" И Сессия <> "" Тогда
				ЗапуститьПроцесс(ШаблонСтроки + Сессия);	
				Лог.Отладка(МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс) + " Отключили пользователя: " + СтрокаРазбораЗначение);
				Сессия = "";
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	Исключение
		Лог.Отладка(МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс) + " Ошибка отключения пользователей: " + СписокСеансов);
	КонецПопытки;
КонецПроцедуры

Процедура УстановитьСтатусБлокировкиСеансов(Блокировать, ТипБазы)
	Прил = ОбщиеПараметры.Параметр("appPath");
	ИдентКластера = ОбщиеПараметры.Параметр("clusterGUID");
	ИдентБазы = ОбщиеПараметры.Параметр(ТипБазы + "GUID");
	СтрокаЗапуска = ОбернутьВКавычки(Прил) + " infobase update  --cluster=" + ИдентКластера + " --infobase=" + ИдентБазы +
					" --infobase-user=" + ОбщиеПараметры.Параметр("user") + " --infobase-pwd=" + ОбщиеПараметры.Параметр("passwd") +
					" --sessions-deny=" + ?(Блокировать, "on","off") + " --permission-code=" + ОбщиеПараметры.Параметр("unlockCode");
	ЗапуститьПроцесс(СтрокаЗапуска);	
КонецПроцедуры

ПрочитатьПараметры();
ЧасовойПояс = ЧасовойПояс();
ТекДата = МестноеВремя(ТекущаяУниверсальнаяДата(),ЧасовойПояс);

ТипБазы = АргументыКоманднойСтроки[0];

ПутьПоиска = ОбщиеПараметры.Параметр("backupPath");

Лог = Логирование.ПолучитьЛог("oscript.app.createbackups");
Лог.УстановитьУровень(УровниЛога.Отладка);
ФайлЖурнала = Новый ВыводЛогаВФайл;
ФайлЖурнала.ОткрытьФайл(ОбъединитьПути(ТекущийСценарий().Каталог, "Logs\" + ТипБазы + "backup.log"));
Лог.ДобавитьСпособВывода(ФайлЖурнала);
ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Запуск формирования базы вчерашнего дня для " + ТипБазы);
Лог.Отладка(Строка(ОтметкаВремени) + " Запуск формирования базы вчерашнего дня для " + ТипБазы);
//Для Каждого ТекБД Из ОбщиеПараметры.Параметр("dbList") Цикл
//	ТипБазы = ТекБД;
	ИмяФайлаАрхива = "" + ТипБазы  + Формат(ТекДата,"ДФ=ddMMyyyy") + ".bak";
	ПутьАрхива = ОбъединитьПути(ПутьПоиска,ИмяФайлаАрхива);
	Лог.Отладка(Строка(ОтметкаВремени) + " Ищем файл " + ПутьАрхива);
	НайдФайлы = НайтиФайлы(ПутьПоиска, ТипБазы + "*.bak",Истина );

	Нашли = Ложь;

	Если НайдФайлы.Количество() <> 0 Тогда
		Для Каждого НайдФайл из НайдФайлы Цикл
			Если НайдФайл.Имя <> ИмяФайлаАрхива Тогда
				УдалитьФайлы(НайдФайл.ПолноеИмя);
			Иначе
				ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
				Лог.Отладка(Строка(ОтметкаВремени) + " Нашли актуальный бэкап");
				Лог.Информация(Строка(ОтметкаВремени) + " Нашли актуальный бэкап");
				Нашли = Истина;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	Если Нашли = Ложь Тогда
		ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
		Лог.Отладка(Строка(ОтметкаВремени) + " Создаем бэкап рабочей базы");
		Лог.Информация(Строка(ОтметкаВремени) + " Создаем бэкап рабочей базы");
		СоздатьБэкап(ПутьАрхива, ТипБазы);
		ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
		Лог.Отладка(Строка(ОтметкаВремени) + " Бэкап готов рабочей базы");
		Лог.Информация(Строка(ОтметкаВремени) + " Бэкап готов базы");

	КонецЕсли;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Восстанавливаем бэкап в базу вчерашнего дня");
	Лог.Информация(Строка(ОтметкаВремени) + " Восстанавливаем бэкап в базу вчерашнего дня");

	УстановитьСтатусБлокировкиСеансов(Истина, ТипБазы);
//	ОтключитьСеансы(ТипБазы);

	ВосстановитьБэкап(ПутьАрхива, ТипБазы);
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Восстановили");
	Лог.Информация(Строка(ОтметкаВремени) + " Восстановили");
	Конфигуратор = Новый УправлениеКонфигуратором();

	ИмяРасширения = ОбщиеПараметры.Параметр(ТипБазы + "extname");
	ПараметрыСоединения = Конфигуратор.ПараметрыСтрокиСоединения();
	ПараметрыСоединения.Сервер = ОбщиеПараметры.Параметр("AppServer");
	ПараметрыСоединения.Порт = ОбщиеПараметры.Параметр("AppServerPort");
	ПараметрыСоединения.ИмяБазы = ОбщиеПараметры.Параметр(ТипБазы + "DBtest");
	
	Конфигуратор.УстановитьКонтекст(ПараметрыСоединения, ОбщиеПараметры.Параметр("user"), ОбщиеПараметры.Параметр("passwd"));
	КодРазблокировки = ОбщиеПараметры.Параметр("unlockCode");
	Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазблокировки);

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Отключаем конфигурацию от хранилища");
	Лог.Информация(Строка(ОтметкаВремени) + " Отключаем конфигурацию от хранилища");
	Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазблокировки);	
	Попытка
		Конфигуратор.ОтключитьсяОтХранилища(ИмяРасширения);	
	Исключение
		Лог.Отладка(ОписаниеОшибки());
	КонецПопытки;
	
	
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Меняем заголовок");
	Лог.Информация(Строка(ОтметкаВремени) + " Меняем заголовок");
	Попытка
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазблокировки);
		Конфигуратор.ЗапуститьВРежимеПредприятия("УстановитьЗаголовок;" + ОбщиеПараметры.Параметр(ТипБазы + "Header"));		
	Исключение
		Лог.Отладка(ОписаниеОшибки());
	КонецПопытки;

//	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
//	Лог.Отладка(Строка(ОтметкаВремени) + " Устанавливаем права програмистов");
//	Лог.Информация(Строка(ОтметкаВремени) + " Устанавливаем права програмистов");
//	Попытка
//		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазблокировки);
//		Конфигуратор.ЗапуститьВРежимеПредприятия("УстановитьПраваДляПрограммистов;");		
//	Исключение
//		Лог.Отладка(ОписаниеОшибки());
//	КонецПопытки;

	
	УстановитьСтатусБлокировкиСеансов(Ложь, ТипБазы);

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Строка(ОтметкаВремени) + " Закончили");
	Лог.Информация(Строка(ОтметкаВремени) + " Закончили");
	Лог.Закрыть();
//КонецЦикла;