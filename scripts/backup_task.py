import datetime
import os
import pyodbc
from pathlib import Path
import sys
import json
# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ app, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å db_utils
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from app.email_sender import notify_admin_on_backup_failure
from app.config_loader import get_global_setting

from app.db_utils import get_svc_conn, get_sql_server_conn # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from app.config_loader import get_global_setting # <-- –ò–º–ø–æ—Ä—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î

def daily_backup():
    # ... (–≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –±—ç–∫–∞–ø–∞)
    try:
        # ... (–≤–∞—à –∫–æ–¥)
        pass
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {error_msg}")
        notify_admin_on_backup_failure(error_msg)  # <-- –ù–æ–≤–æ–µ
        raise e
    
def get_svc_conn():
    return pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost;"
        "DATABASE=svc_sqlrestore;"
        "Trusted_Connection=yes;"
    )

def create_backup_from_source(source_db_name):
    # ... (—á—Ç–µ–Ω–∏–µ –∏–∑ BackupSources —á–µ—Ä–µ–∑ get_svc_conn)
    conn = get_svc_conn() # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db_utils
    cursor = conn.cursor()
    cursor.execute("""
        SELECT source_server, sql_login, sql_password, datafile_name
        FROM BackupSources WHERE source_db_name = ?
    """, source_db_name)
    row = cursor.fetchone()
    if not row:
        raise ValueError(f"–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è {source_db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    source_server, sql_login, sql_password, datafile_name = row
    conn.close()

    # –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–∞
    backup_dir = os.path.join(get_global_setting('backup_base_path') or r'D:\SQLBackups', source_db_name)
    Path(backup_dir).mkdir(parents=True, exist_ok=True)
    today_str = datetime.date.today().strftime("%d%m%Y")
    backup_file = os.path.join(backup_dir, f"{source_db_name}{today_str}.bak")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ prod-—Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π SQL Server (–∏–ª–∏ —á–µ—Ä–µ–∑ source_server, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, source_db_name - —ç—Ç–æ –ë–î –Ω–∞ source_server
    # –ï—Å–ª–∏ source_server != –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É, —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å source_server
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ source_server == –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
    # –ï—Å–ª–∏ source_server != –æ—Å–Ω–æ–≤–Ω–æ–º—É, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ —á–∏—Ç–∞—Ç—å –∏–∑ BackupSources
    # prod_conn = pyodbc.connect(
    #     f"DRIVER={{ODBC Driver 17 for SQL Server}};"
    #     f"SERVER={source_server};"  # <-- –ï—Å–ª–∏ source_server != –æ—Å–Ω–æ–≤–Ω–æ–º—É
    #     f"DATABASE={source_db_name};"
    #     f"UID={sql_login};PWD={sql_password}"
    # )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π SQL Server –∏–∑ config/app_config.json
    sql_server_address = get_global_setting('sql_server_address') or 'localhost'
    prod_conn_str = f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={sql_server_address};DATABASE={source_db_name};UID={sql_login};PWD={sql_password}"
    prod_conn = pyodbc.connect(prod_conn_str) # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä

    cursor = prod_conn.cursor()
    cursor.execute(f"BACKUP DATABASE [{source_db_name}] TO DISK = ? WITH COPY_ONLY, COMPRESSION, STATS = 10", backup_file)
    prod_conn.commit()
    prod_conn.close()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª—É–∂–µ–±–Ω—É—é –ë–î —á–µ—Ä–µ–∑ get_svc_conn
    conn = get_svc_conn() # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ db_utils
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO Backups (source_db_name, backup_file_path, backup_date) VALUES (?, ?, ?)",
        source_db_name, backup_file, datetime.date.today()
    )
    conn.commit()
    conn.close()

    return backup_file

def daily_backup():
    today = datetime.date.today()
    today_str = today.strftime("%d%m%Y")

    conn = get_svc_conn()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ source_db_name
    cursor.execute("""
        SELECT DISTINCT source_db_name FROM (
            SELECT source_db_name FROM UserDatabases
            UNION
            SELECT source_db_name FROM CommonDatabases
        ) AS all_dbs
    """)
    source_dbs = [row[0] for row in cursor.fetchall()]
    conn.close()

    for db_name in source_dbs:
        print(f"üîÑ –ë—ç–∫–∞–ø {db_name}...")
        try:
            create_backup_from_source(db_name)
            print(f"‚úÖ {db_name} ‚Äî –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ùå {db_name} ‚Äî –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    daily_backup()