# scripts/migrate_configs.py

import json
import pyodbc
import os
import re
from pathlib import Path

# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ app, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å db_utils
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.db_utils import get_svc_conn # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è

def main():
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–∑ JSON –≤ –ë–î...")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥–æ–≤
    common_json_path = Path('configs/common.json')
    backup_json_path = Path('configs/backup.json')
    users_json_pattern = Path('configs/user_*.json')

    if not common_json_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {common_json_path}")
        return
    if not backup_json_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_json_path}")
        return

    # --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ JSON-–∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
    print("üìÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
    with open(common_json_path, 'r', encoding='utf-8') as f:
        common_conf = json.load(f)
    with open(backup_json_path, 'r', encoding='utf-8') as f:
        backup_conf = json.load(f)

    # --- 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ---
    print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–ª—É–∂–µ–±–Ω–æ–π –ë–î svc_sqlrestore...")
    try:
        conn = get_svc_conn() # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        cursor = conn.cursor()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return

    # --- 3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ BackupSources (–∏–∑ backup.json) ---
    print("üíæ –ó–∞–ø–æ–ª–Ω—è—é —Ç–∞–±–ª–∏—Ü—É BackupSources...")
    for db_type in ['ERP', 'UPP', 'HRM']:
        source_db_key = f'sourceDB{db_type}'
        if source_db_key not in backup_conf:
            print(f"  ‚ö†Ô∏è –ö–ª—é—á {source_db_key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ backup.json, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        source_db = backup_conf[source_db_key]
        server_key = f'serverDB{db_type}'
        user_key = f'userDB{db_type}'
        passw_key = f'passwDB{db_type}'
        datafile_key = f'{db_type}Datafile'

        server = backup_conf.get(server_key, '')
        user = backup_conf.get(user_key, '')
        password = backup_conf.get(passw_key, '')
        datafile = backup_conf.get(datafile_key, '')

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        cursor.execute("SELECT COUNT(*) FROM BackupSources WHERE source_db_name = ?", source_db)
        exists = cursor.fetchone()[0]
        if exists:
            print(f"  ‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ {source_db} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è—é.")
            cursor.execute("""
                UPDATE BackupSources
                SET source_server = ?, sql_login = ?, sql_password = ?, datafile_name = ?
                WHERE source_db_name = ?
            """, server, user, password, datafile, source_db)
        else:
            cursor.execute("""
                INSERT INTO BackupSources (
                    source_db_name, source_server, sql_login, sql_password, datafile_name
                ) VALUES (?, ?, ?, ?, ?)
            """, source_db, server, user, password, datafile)
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source_db}")

    # --- 4. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ CommonDatabases (–∏–∑ backup.json –∏ common.json) ---
    print("üåê –ó–∞–ø–æ–ª–Ω—è—é —Ç–∞–±–ª–∏—Ü—É CommonDatabases...")
    for db_type in ['ERP', 'UPP', 'HRM']:
        source_db_key = f'sourceDB{db_type}'
        target_db_key = f'{db_type}DBtest'
        header_key = f'{db_type}Header'
        storage_path_key = f'{db_type}StoragePath' # –∏–∑ common.json

        if source_db_key not in backup_conf or target_db_key not in backup_conf:
            print(f"  ‚ö†Ô∏è –ö–ª—é—á–∏ –¥–ª—è {db_type} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ backup.json, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            continue

        source_db = backup_conf[source_db_key]
        target_db = backup_conf[target_db_key]
        header = backup_conf.get(header_key, f'–¢–µ—Å—Ç–æ–≤–∞—è {db_type}')
        storage_path = common_conf.get(storage_path_key, '') # –ø—É—Ç—å –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –∏–∑ common.json

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        cursor.execute("SELECT COUNT(*) FROM CommonDatabases WHERE restore_target_db = ?", target_db)
        exists = cursor.fetchone()[0]
        if exists:
            print(f"  ‚ÑπÔ∏è –û–±—â–∞—è –ë–î {target_db} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è—é.")
            cursor.execute("""
                UPDATE CommonDatabases
                SET source_db_name = ?, header = ?, storage_path = ?
                WHERE restore_target_db = ?
            """, source_db, header, storage_path, target_db)
        else:
            cursor.execute("""
                INSERT INTO CommonDatabases (
                    source_db_name, restore_target_db, backup_path_template, header, storage_path
                ) VALUES (?, ?, ?, ?, ?)
            """, source_db, target_db, backup_conf.get('backupPath', ''), header, storage_path)
            print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—â–∞—è –ë–î: {target_db}")

    # --- 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö user_*.json —Ñ–∞–π–ª–æ–≤ ---
    print("üë§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (user_*.json)...")
    configs_dir = Path('configs')
    user_config_files = list(configs_dir.glob('user_*.json'))

    if not user_config_files:
        print("  ‚ö†Ô∏è –§–∞–π–ª—ã user_*.json –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for user_config_path in user_config_files:
            filename = user_config_path.name
            match = re.match(r'^user_(.+)\.json$', filename)
            if not match:
                continue
            windows_login = match.group(1).lower()
            print(f"  üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–Ω—Ñ–∏–≥: {filename} -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {windows_login}")

            with open(user_config_path, 'r', encoding='utf-8') as f:
                try:
                    user_conf = json.load(f)
                except json.JSONDecodeError as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {filename}: {e}")
                    continue

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Users, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º
            cursor.execute("SELECT id FROM Users WHERE windows_login = ?", windows_login)
            user_row = cursor.fetchone()
            if not user_row:
                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                full_name = user_conf.get('full_name', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {windows_login}')
                cursor.execute("INSERT INTO Users (windows_login, full_name) VALUES (?, ?)", windows_login, full_name)
                conn.commit() # –ù—É–∂–Ω–æ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                cursor.execute("SELECT id FROM Users WHERE windows_login = ?", windows_login)
                user_id = cursor.fetchone()[0]
                print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {windows_login}")
            else:
                user_id = user_row[0]
                print(f"    ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {windows_login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

            # 6. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ UserDatabases –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for db_type in ['ERP', 'UPP', 'HRM']:
                target_db_key = f'{db_type}DB'
                source_db_key = f'sourceDB{db_type}' # –∏–∑ common.json

                if target_db_key not in user_conf:
                    print(f"      ‚ö†Ô∏è –ö–ª—é—á {target_db_key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {filename}, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
                    continue

                target_db_name = user_conf[target_db_key]
                # –ò—Å—Ç–æ—á–Ω–∏–∫ –±–µ—Ä–µ–º –∏–∑ common.json (–∫–∞–∫ –≤ OScript-—Å–∫—Ä–∏–ø—Ç–∞—Ö)
                source_db_name = common_conf.get(source_db_key, f'TST_{db_type}_YD') # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞

                storage_user = user_conf.get('storageUser')
                storage_password = user_conf.get('storagePassw')
                header = user_conf.get(f'{db_type}Header')
                use_storage_str = user_conf.get(f'{db_type}_storage', '–õ–æ–∂—å')
                use_storage = 1 if use_storage_str == '–ò—Å—Ç–∏–Ω–∞' else 0
                storage_path_key = f'{db_type}StoragePath'
                storage_path = common_conf.get(storage_path_key, '') # –ø—É—Ç—å –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –∏–∑ common.json

                # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT id FROM UserDatabases WHERE user_id = ? AND restore_target_db = ?", user_id, target_db_name)
                existing_db = cursor.fetchone()
                if existing_db:
                    print(f"      ‚ö†Ô∏è –ë–î {target_db_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {windows_login}, –æ–±–Ω–æ–≤–ª—è—é.")
                    cursor.execute("""
                        UPDATE UserDatabases
                        SET source_db_name = ?, storage_user = ?, storage_password = ?, header = ?, use_storage = ?, storage_path = ?
                        WHERE id = ?
                    """, source_db_name, storage_user, storage_password, header, use_storage, storage_path, existing_db[0])
                else:
                    cursor.execute("""
                        INSERT INTO UserDatabases (
                            user_id, source_db_name, restore_target_db, backup_path_template,
                            storage_user, storage_password, header, use_storage, storage_path
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                    user_id,
                    source_db_name,
                    target_db_name,
                    common_conf.get('backupPath', ''), # –ø—É—Ç—å –∫ –±—ç–∫–∞–ø–∞–º –∏–∑ common.json
                    storage_user,
                    storage_password,
                    header,
                    use_storage,
                    storage_path
                    )
                    print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ë–î {target_db_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {windows_login}")

    # --- 7. –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    conn.commit()
    conn.close()
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == '__main__':
    main()