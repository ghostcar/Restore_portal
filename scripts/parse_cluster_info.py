import re
import pyodbc
from pathlib import Path
from app.config_loader import get_global_setting
def parse_1cv8clst_lst(file_path):
    """
    –ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª 1CV8Clst.lst –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (cluster_guid, list of infobases)
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ cluster_guid –∏–∑ –Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π GUID –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)
    cluster_guid_match = re.search(r'\{([a-fA-F0-9-]{36}),"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä"', content)
    cluster_guid = cluster_guid_match.group(1) if cluster_guid_match else None

    if not cluster_guid:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞")
        return None, []

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {GUID,"name","descr",... DB=–∏–º—è_–±–¥; ...
    pattern = r'\{([a-fA-F0-9-]{36}),"([^"]+)","([^"]*?)"[^}]*?DB=([^;]+);'
    matches = re.findall(pattern, content)

    infobases = []
    for guid, name, description, db_name in matches:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ DBSrvr
        start_pos = content.find(guid)
        end_pos = content.find('}', start_pos)
        snippet = content[start_pos:end_pos]
        db_server_match = re.search(r'DBSrvr=([^;]+);', snippet)
        db_server = db_server_match.group(1) if db_server_match else None

        infobases.append({
            'infobase_guid': guid,
            'name': name,
            'description': description,
            'db_name': db_name,
            'db_server': db_server
        })

    return cluster_guid, infobases

def sync_cluster_info_to_db(cluster_guid, infobases):
    conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost;"
        "DATABASE=svc_sqlrestore;"
        "Trusted_Connection=yes;"
    )
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º/–≤—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for ib in infobases:
        cursor.execute("""
            MERGE ClusterInfo AS target
            USING (SELECT ? AS infobase_guid, ? AS cluster_guid, ? AS name, ? AS description, ? AS db_name, ? AS db_server) AS source
            ON target.infobase_guid = source.infobase_guid
            WHEN MATCHED THEN
                UPDATE SET cluster_guid = source.cluster_guid, name = source.name, description = source.description,
                           db_name = source.db_name, db_server = source.db_server, updated_at = GETDATE()
            WHEN NOT MATCHED THEN
                INSERT (infobase_guid, cluster_guid, name, description, db_name, db_server)
                VALUES (source.infobase_guid, source.cluster_guid, source.name, source.description, source.db_name, source.db_server);
        """, ib['infobase_guid'], cluster_guid, ib['name'], ib['description'], ib['db_name'], ib['db_server'])

    conn.commit()
    conn.close()

def link_user_databases_to_cluster():
    """
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ UserDatabases —Å ClusterInfo –ø–æ –∏–º–µ–Ω–∏ (restore_target_db = name).
    –û–±–Ω–æ–≤–ª—è–µ—Ç UserDatabases, –¥–æ–±–∞–≤–ª—è—è –ø–æ–ª–µ infobase_guid.
    """
    conn = pyodbc.connect(
        "DRIVER={ODBC Driver 17 for SQL Server};"
        "SERVER=localhost;"
        "DATABASE=svc_sqlrestore;"
        "Trusted_Connection=yes;"
    )
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –≤ UserDatabases, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE UserDatabases ADD infobase_guid NVARCHAR(36) NULL;")
    except:
        pass  # —É–∂–µ –µ—Å—Ç—å

    try:
        cursor.execute("ALTER TABLE CommonDatabases ADD infobase_guid NVARCHAR(36) NULL;")
    except:
        pass  # —É–∂–µ –µ—Å—Ç—å

    # –û–±–Ω–æ–≤–ª—è–µ–º UserDatabases
    cursor.execute("""
        UPDATE ud
        SET infobase_guid = ci.infobase_guid
        FROM UserDatabases ud
        JOIN ClusterInfo ci ON ud.restore_target_db = ci.name;
    """)

    # –û–±–Ω–æ–≤–ª—è–µ–º CommonDatabases
    cursor.execute("""
        UPDATE cd
        SET infobase_guid = ci.infobase_guid
        FROM CommonDatabases cd
        JOIN ClusterInfo ci ON cd.restore_target_db = ci.name;
    """)

    conn.commit()
    conn.close()

def main():
    file_path = get_global_setting('cluster_info_file_path') or r"C:\Program Files\1cv8\srvinfo\reg_1541\1CV8Clst.lst" # <-- –ò–∑ –ë–î –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#    file_path = r"C:\Program Files\1cv8\srvinfo\reg_1541\1CV8Clst.lst"
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return

    cluster_guid, infobases = parse_1cv8clst_lst(file_path)
    if not cluster_guid:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞—Å—Ç–µ—Ä–∞")
    else:
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä: {cluster_guid}")
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –±–∞–∑: {len(infobases)}")

    if infobases:
        sync_cluster_info_to_db(cluster_guid, infobases)
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Ç–µ—Ä–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ë–î")
        link_user_databases_to_cluster()
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ë–î —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å –∫–ª–∞—Å—Ç–µ—Ä–æ–º")

if __name__ == '__main__':
    main()