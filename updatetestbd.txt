#Использовать sql
#Использовать v8runner
#Использовать configor
#Использовать asserts
#Использовать logos

Перем Параметры; //Глобальное хранилище параметров для выполнения скрипта.
Перем ОбщиеПараметры; //Глобальное хранилище параметров общих для всех скриптов.

Процедура СоздатьБэкап(ПутьАрхива, ТипБазы) Экспорт
	
	серверБД = ОбщиеПараметры.Параметр("serverDB");
	ПользовательБД = ОбщиеПараметры.Параметр("userDBtest");
	ПарольБД = ОбщиеПараметры.Параметр("passwDBtest");
	ИмяБазы = ОбщиеПараметры.Параметр("sourceDB" + ТипБазы);

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = серверБД;
	Соединение.ИмяПользователя = ПользовательБД;
	Соединение.Пароль = ПарольБД;
	Соединение.ИмяБазы = ИмяБазы;
	Соединение.Открыть();

	Запрос = Новый Запрос;
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Таймаут = 0; 
	Запрос.Текст = "BACKUP DATABASE [" + ИмяБазы +"] TO  DISK = N'" + ПутьАрхива + "' WITH  COPY_ONLY,  RETAINDAYS = 1, NOFORMAT, NOINIT,  
	|NAME = N'"+ИмяБазы + "', SKIP, NOREWIND, NOUNLOAD, COMPRESSION,  STATS = 10";
	Запрос.ВыполнитьКоманду();
	Соединение.Закрыть();
КонецПроцедуры

Процедура ВосстановитьБэкап(ПутьАрхива, ТипБазы, Лог) Экспорт
	ЧасовойПояс = ЧасовойПояс();
	серверБД = ОбщиеПараметры.Параметр("serverDB");
	ПользовательБД = ОбщиеПараметры.Параметр("usersaDBtest");

	ПарольБД = ОбщиеПараметры.Параметр("passwsaDBtest");	
	ИмяБазы = Параметры.Параметр(ТипБазы + "DB");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = серверБД;
	Соединение.ИмяПользователя = ПользовательБД;
	Соединение.Пароль = ПарольБД;
	Соединение.ИмяБазы = ИмяБазы;
	Соединение.Открыть();

	ИмяНабора = ОбщиеПараметры.Параметр(ТипБазы + "Datafile");
	ПутьДанных = ОбщиеПараметры.Параметр("MSSQLDataPath");
	Запрос = Новый Запрос;
	Запрос.УстановитьСоединение(Соединение);

	Запрос.Текст = "USE [master]
	|ALTER DATABASE [" + ИмяБазы +"] SET SINGLE_USER WITH ROLLBACK IMMEDIATE
	|RESTORE DATABASE [" + ИмяБазы +"] FROM  DISK = N'" + ПутьАрхива + "' WITH  FILE = 1, 
	|MOVE N'" + ИмяНабора + "' TO N'"+ ПутьДанных + ИмяБазы + ".mdf',  MOVE N'" + ИмяНабора + "_log' TO N'"+ ПутьДанных + ИмяБазы + "_log.ldf',  NOUNLOAD,  REPLACE,  STATS = 5
	|ALTER DATABASE [" + ИмяБазы +"] SET MULTI_USER";
	Запрос.Таймаут = 0;	

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Отладка(Запрос.Текст);
	Попытка
		Запрос.ВыполнитьКоманду();	
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Явно указываем владельца БД");
	Запрос.Текст = "ALTER AUTHORIZATION ON DATABASE::[" + ИмяБазы +"] TO [" + ОбщиеПараметры.Параметр("userDBtest") +"]";
	Попытка
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Меняем режим восстановления");	
	Запрос.Текст = "USE [master]
	|ALTER DATABASE [" + ИмяБазы +"]
	|SET RECOVERY SIMPLE";
	Попытка
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Обрезаем файлы базы");	
	Запрос.Текст = "USE [" + ИмяБазы +"]
	|SELECT file_id, name
	|FROM sys.database_files
	|DBCC SHRINKFILE (2, TRUNCATEONLY)";
	Запрос.Таймаут = 0;
	Попытка	
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	Соединение.Закрыть();
КонецПроцедуры

Процедура УстновитьПараллелизм(Степень, ТипБазы, Лог)
	серверБД = ОбщиеПараметры.Параметр("serverDB");
	ПользовательБД = ОбщиеПараметры.Параметр("usersaDBtest");
	ПарольБД = ОбщиеПараметры.Параметр("passwsaDBtest");	
	ИмяБазы = Параметры.Параметр(ТипБазы + "DB");

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = серверБД;
	Соединение.ИмяПользователя = ПользовательБД;
	Соединение.Пароль = ПарольБД;
	Соединение.ИмяБазы = ИмяБазы;
	Соединение.Открыть();

	Запрос = Новый Запрос;
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "USE " + ИмяБазы + ";
	|EXEC sp_configure 'show advanced options', 1;
	|RECONFIGURE WITH OVERRIDE;  
	|EXEC sp_configure 'max degree of parallelism', " + Степень +";
	|RECONFIGURE WITH OVERRIDE;"; 

	Запрос.УстановитьПараметр("Nom", Степень);
	Попытка
		Запрос.ВыполнитьКоманду();
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	Соединение.Закрыть();
КонецПроцедуры


Процедура ПрочитатьПараметры()
	
	Параметры  = Новый МенеджерПараметров();
	Параметры.ДобавитьПровайдерПараметров(Новый ПровайдерПараметровJSON());
	Параметры.УстановитьФайлПараметров(ОбъединитьПути(ТекущийСценарий().Каталог, "configs\"+АргументыКоманднойСтроки[0] + ".json"));
	Параметры.Прочитать();

	ОбщиеПараметры  = Новый МенеджерПараметров();
	ОбщиеПараметры.ДобавитьПровайдерПараметров(Новый ПровайдерПараметровJSON());
	ОбщиеПараметры.УстановитьФайлПараметров(ОбъединитьПути(ТекущийСценарий().Каталог, "configs\common.json"));
	ОбщиеПараметры.Прочитать();

КонецПроцедуры

ПрочитатьПараметры();
ТекДата = ТекущаяУниверсальнаяДата();
ТипБазы = АргументыКоманднойСтроки[1];
ЧасовойПояс = ЧасовойПояс();

Лог = Логирование.ПолучитьЛог("oscript.app.createdevbases");
Лог.УстановитьУровень(УровниЛога.Отладка);
ФайлЖурнала = Новый ВыводЛогаВФайл;
ФайлЖурнала.ОткрытьФайл(ОбъединитьПути(ТекущийСценарий().Каталог, "Logs\" + АргументыКоманднойСтроки[0] + ".log"));
Лог.ДобавитьСпособВывода(ФайлЖурнала);
ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Запуск формирования базы " + ТипБазы);
Лог.Отладка(Строка(ОтметкаВремени) + " Запуск формирования базы " + ТипБазы);

ИмяФайлаАрхива = "" + ТипБазы  + Формат(ТекДата, "ДФ=ddMMyyyy") + ".bak";
ПутьАрхива = ОбъединитьПути(ОбщиеПараметры.Параметр("backupPath"), ИмяФайлаАрхива);
НайдФайлы = НайтиФайлы(ПутьАрхива);

Если НайдФайлы.Количество() = 0 Тогда
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Создаем бэкап");
	СоздатьБэкап(ПутьАрхива, ТипБазы);
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Бэкап готов");
КонецЕсли;

Конфигуратор = Новый УправлениеКонфигуратором;

ИмяРасширения = ОбщиеПараметры.Параметр(ТипБазы + "extname");
ПараметрыСоединения = Конфигуратор.ПараметрыСтрокиСоединения();
ПараметрыСоединения.Сервер = ОбщиеПараметры.Параметр("AppServer");
ПараметрыСоединения.Порт = ОбщиеПараметры.Параметр("AppServerPort");
ПараметрыСоединения.ИмяБазы = Параметры.Параметр(ТипБазы + "DB");
Конфигуратор.УстановитьКонтекст(ПараметрыСоединения, ОбщиеПараметры.Параметр("user"), ОбщиеПараметры.Параметр("passwd"));
СтрокаСоединения = ОбщиеПараметры.Параметр(ТипБазы + "StoragePath");
ПользовательХранилища = Параметры.Параметр("storageUser");
ПарольХранилища = Параметры.Параметр("storagePassw");
ТекстКомментария = "Принудительное помещение объектов при восстановлении копии";
Если Параметры.Параметр(ТипБазы + "_storage") = "Истина" Тогда
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Помещаем всё в хранилище и отключаем базу от хранилища");
	//Конфигуратор.ПоместитьИзмененияОбъектовВХранилище(СтрокаСоединения,ПользовательХранилища,ПарольХранилища,Неопределено,ТекстКомментария	,Ложь, Ложь, ИмяРасширения);
	Попытка 
		Конфигуратор.ОтключитьсяОтХранилища(ИмяРасширения);
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Отключили базу от хранилища");
КонецЕсли;

ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Начинаем восстанвливать базу");

ВосстановитьБэкап(ПутьАрхива, ТипБазы, Лог);

ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Восстановили, отключаем от хранилища");
Попытка
	Конфигуратор.ОтключитьсяОтХранилища(ИмяРасширения);
Исключение
	Лог.Ошибка(ОписаниеОшибки());
КонецПопытки;

ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Отключили от хранилища");

Если Параметры.Параметр(ТипБазы + "_storage") = "Истина" Тогда
	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Подлючаем к хранилищу и обновляем конфигурацию БД");

	УстновитьПараллелизм(0, ТипБазы, Лог);
	Попытка
		Конфигуратор.ПодключитьсяКХранилищу(СтрокаСоединения,ПользовательХранилища,ПарольХранилища, Истина, Истина, ИмяРасширения);
		Сообщить("Подключили к хранилищу");
		Конфигуратор.РасширениеПолучитьИзХранилища(СтрокаСоединения,ПользовательХранилища,ПарольХранилища, ИмяРасширения);
		Сообщить("Обновили из хранилища");
		Конфигуратор.ОбновитьКонфигурациюБазыДанных(Ложь, ЛОЖЬ, ЛОЖЬ, ИмяРасширения);
		Сообщить("Обновили конфигурацию БД");
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
	КонецПопытки;

	УстновитьПараллелизм(1, ТипБазы, Лог);

	ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	Лог.Информация(Строка(ОтметкаВремени) + " Закончили подключение к хранилищу");
КонецЕсли;

ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Отладка(Строка(ОтметкаВремени) + " Меняем заголовок");
Лог.Информация(Строка(ОтметкаВремени) + " Меняем заголовок");
Попытка
	Конфигуратор.ЗапуститьВРежимеПредприятия("УстановитьЗаголовок;" + Параметры.Параметр(ТипБазы + "Header") + " " + Формат(ТекДата, "ДФ=ddMMyyyy"));
Исключение
	Лог.Ошибка(ОписаниеОшибки());
КонецПопытки;

ОтметкаВремени = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
Лог.Информация(Строка(ОтметкаВремени) + " Все опреации завершены");